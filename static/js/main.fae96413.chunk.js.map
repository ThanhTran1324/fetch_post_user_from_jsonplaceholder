{"version":3,"sources":["apis/jsonPlaceholder.js","actions/index.js","components/UserHeader.js","components/PostList.js","components/App.js","reducers/index.js","reducers/postReducer.js","reducers/userReducer.js","index.js"],"names":["axios","create","baseURL","fetchPosts","dispatch","a","jsonPlaceholder","get","response","type","payload","data","fetchUser","id","UserHeader","user","this","props","className","name","React","Component","connect","state","ownProps","users","find","userID","PostList","renderPostList","posts","map","post","key","title","body","userId","fetchPostAndUser","getState","_","uniq","forEach","App","combineReducers","action","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","querySelector"],"mappings":"4QAEeA,E,OAAAA,EAAMC,OAAO,CACxBC,QAAQ,yC,iBCqBCC,EAAa,WACvB,8CAAO,WAAgBC,GAAhB,eAAAC,EAAA,sEACqBC,EAAgBC,IAAI,UADzC,OACIC,EADJ,OAEFJ,EAAS,CAACK,KAAM,cAAeC,QAASF,EAASG,OAF/C,2CAAP,mDAAM,IAMIC,EAAY,SAACC,GACvB,8CAAO,WAAgBT,GAAhB,eAAAC,EAAA,sEACmBC,EAAgBC,IAAhB,iBAA8BM,IADjD,OACEL,EADF,OAEJJ,EAAS,CAACK,KAAK,aAAaC,QAAQF,EAASG,OAFzC,2CAAP,mDAAM,IC3BHG,E,iLAGC,IAAMC,EAAOC,KAAKC,MAAMF,KACxB,OAAIA,EAGG,yBAAKG,UAAU,UAAUH,EAAKI,MAF1B,S,GALOC,IAAMC,WAehBC,eALS,SAACC,EAAMC,GAC3B,MAAO,CACHT,KAAOQ,EAAME,MAAMC,MAAM,SAAAX,GAAI,OAAIA,EAAKF,KAAKW,EAASG,aAG7CL,CAAyBR,GCflCc,E,2MAKFC,eAAiB,WACb,OAAO,EAAKZ,MAAMa,MAAMC,KAAI,SAACC,GACzB,OACQ,yBAAKd,UAAU,OAAOe,IAAKD,EAAKnB,IAC5B,uBAAGK,UAAU,mCACb,yBAAKA,UAAU,WACX,yBAAKA,UAAU,eACX,4BAAKc,EAAKE,OACV,2BAAIF,EAAKG,OAEb,kBAAC,EAAD,CAAYR,OAAQK,EAAKI,e,mFAb7CpB,KAAKC,MAAMoB,qB,+BAoBX,OAAO,yBAAKnB,UAAU,2BACjBF,KAAKa,sB,GAvBKT,IAAMC,WA8BdC,eAHS,SAACC,GACrB,MAAO,CAACO,MAAMP,EAAMO,SAEe,CAACO,iBF9BR,yDAAM,WAAOjC,EAASkC,GAAhB,SAAAjC,EAAA,sEAC7BD,EAASD,KADoB,OAItBoC,IAAEC,KAAKD,IAAER,IAAIO,IAAWR,MAAM,WAIpCW,SAAQ,SAAA5B,GAAE,OAAGT,EAASQ,EAAUC,OARJ,2CAAN,0DE8BjBS,CAA6DM,GC1B7Dc,EAPH,WACR,OACI,yBAAKxB,UAAU,gBACf,kBAAC,EAAD,Q,QCFOyB,cAAgB,CAC3Bb,MCJW,WAAsB,IAArBP,EAAoB,uDAAd,GAAGqB,EAAW,uCAChC,OAAQA,EAAOnC,MAEX,IAAK,cAED,OAAOmC,EAAOlC,QAElB,QAAS,OAAOa,IDFpBE,MELW,WAAqB,IAApBF,EAAmB,uDAAb,GAAGqB,EAAU,uCAC/B,OAAQA,EAAOnC,MACX,IAAK,aACG,MAAM,GAAN,mBAAWc,GAAX,CAAiBqB,EAAOlC,UAChC,QAAU,OAAOa,MCKnBsB,EAAMC,YAAYC,EAASC,YAAgBC,MACjDC,IAASC,OACL,kBAAC,IAAD,CAAUN,MAAOA,GACb,kBAAC,EAAD,OAEJO,SAASC,cAAc,Y","file":"static/js/main.fae96413.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default axios.create({\n    baseURL:'https://jsonplaceholder.typicode.com'\n\n});","import jsonPlaceholder from '../apis/jsonPlaceholder';\nimport _ from 'lodash';\n\n\n//action creater\nexport const fetchPostAndUser = () => async (dispatch,getState) =>{\n   await dispatch(fetchPosts());\n   //await to wait for pispatch finish.\n\n   const userId=_.uniq(_.map(getState().posts,\"userId\"));\n   // _.map get through all data and return all \"userId\"\n   //_.uniq(data) return only unic data\n   //after get all userid from posts => we fetchUser \n   userId.forEach(id=> dispatch(fetchUser(id)));\n   \n   // _.chain(getState().posts)\n   //    .map('userId')\n   //    .uniq()\n   //    .forEach(id => dispatch(fetchUser(id)))\n   //    .value()\n\n};\n\n\nexport const fetchPosts = () => {\n   return async function (dispatch) {\n        const response = await jsonPlaceholder.get('/posts');\n        dispatch({type: 'FETCH_POSTS', payload: response.data});\n   };\n};\n\nexport const fetchUser = (id) => {\n   return async function (dispatch){\n      const response = await jsonPlaceholder.get(`/users/${id}`);\n      dispatch({type:\"FETCH_USER\",payload:response.data});\n   };\n};\n\n// export const fetchUser = (id) => {\n//    return  function (dispatch) {\n//       _fetchUSer(id,dispatch);\n//    };\n// };\n// const _fetchUSer =  _.memoize(async (id,dispatch) => {\n//    const response = await jsonPlaceholder.get(`/users/${id}`);\n//    dispatch({type:'FETCH_USER',payload:response.data});\n// }); \n","import React from 'react';\nimport {connect} from 'react-redux';\n\n\n\nclass UserHeader extends React.Component {\n    \n   render(){\n       const user = this.props.user;\n       if(!user){\n           return null ;\n       }\n       return <div className=\"header\">{user.name}</div>;\n   } \n}\nconst mapStateToProps = (state,ownProps) =>{\n    return {\n        user : state.users.find( user => user.id===ownProps.userID)\n    };\n}\nexport default connect(mapStateToProps)(UserHeader);","import React from 'react';\nimport {connect} from 'react-redux';\n\nimport {fetchPostAndUser} from '../actions';\nimport UserHeader from './UserHeader';\nclass PostList extends React.Component {\n    componentDidMount(){\n        this.props.fetchPostAndUser();\n    };\n    \n    renderPostList = () =>{\n        return this.props.posts.map((post)=>{\n            return (\n                    <div className=\"item\" key={post.id}>\n                        <i className=\"large middle aligned icon user\"></i>\n                        <div className=\"content\">\n                            <div className=\"description\">\n                                <h2>{post.title}</h2>\n                                <p>{post.body}</p>\n                            </div>\n                            <UserHeader userID={post.userId}/>\n                        </div>\n                    </div>\n                    );\n        })\n    };\n    render(){\n        return <div className=\"ui relaxed divided list\">\n            {this.renderPostList()}\n        </div>;\n    }\n}\nconst mapStateToProps = (state) =>{\n    return {posts:state.posts};\n}\nexport default connect(mapStateToProps,{fetchPostAndUser:fetchPostAndUser})(PostList);","import React from 'react';\nimport PostList from './PostList';\nconst App = () => {\n    return (\n        <div className=\"ui container\">\n        <PostList></PostList>\n        </div>\n    );\n}\nexport default App;","import {combineReducers} from 'redux';\nimport postReducer from './postReducer';\nimport userReducer from './userReducer';\nexport default combineReducers({\n    posts:postReducer,\n    users:userReducer\n});","export default (state=[],action) => {\n    switch (action.type)\n    {\n        case 'FETCH_POSTS':\n            \n            return action.payload;\n\n        default: return state;    \n    }\n       \n    \n};","export default (state=[],action) =>{\n    switch (action.type){\n        case 'FETCH_USER':\n                return [...state,action.payload];\n        default : return state;\n    }\n};\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore,applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\n\nimport App from './components/App';\nimport reducers from './reducers';\n\nconst store=createStore(reducers,applyMiddleware(thunk));\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.querySelector('#root')\n);"],"sourceRoot":""}